// Simulate the exact day marking flow with network capture
console.log("üß™ TESTING: Does TotalsPanel re-fetch /api/v2/totals after day marking?");
console.log("=".repeat(70));

// Simulate API client behavior
const simulateAPIFlow = () => {
  console.log("1. ‚úÖ User clicks day in calendar");
  console.log("2. ‚úÖ DayDrawer opens and user clicks 'Mark No Drink'");
  console.log("3. ‚úÖ executeMarkNoDrink() calls apiClient.markDay()");
  console.log("4. üì° POST /api/days/2025-09-02/no-drink");
  console.log("5. ‚úÖ Success response received");
  console.log("6. ‚úÖ onDayMarked?.() callback triggered");
  console.log("7. ‚úÖ handleDayMarkedSuccess() in CalendarPage");
  console.log("8. üîÑ queryClient.invalidateQueries({ queryKey: ['totals'] })");
  console.log("");
  console.log("üîç CRITICAL QUESTION: Does step 8 trigger /api/v2/totals request?");
  console.log("");
  
  // Test if server is responding to API calls
  console.log("Testing API endpoints...");
  return Promise.all([
    fetch('http://localhost:3000/api/feature-flags/ff.potato.runs_v2')
      .then(r => r.json())
      .then(data => console.log("‚úÖ Feature flag API working:", data.enabled))
      .catch(e => console.log("‚ùå Feature flag API failed:", e.message)),
      
    fetch('http://localhost:3000/api/v2/totals')
      .then(r => r.json()) 
      .then(data => console.log("‚úÖ Totals API working:", Object.keys(data)))
      .catch(e => console.log("‚ùå Totals API failed:", e.message))
  ]);
};

simulateAPIFlow();
