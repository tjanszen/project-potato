Goal: Audit perform_run_merge logic and confirm bug in day_count calculation when bridging runs

Context:
- Phase 6B-1a merge function was recently implemented.
- User test shows incorrect result: marking 9/9–9/10 + 9/12 + 9/11 produced day_count=3 instead of expected 4.
- Hypothesis: perform_run_merge is missing +1 in day_count calculation (using upper(span) - lower(span) instead of upper(span) - lower(span) + 1).
- Need to confirm whether this is a merge function bug or integration ordering issue.

Do:
- Inspect perform_run_merge implementation in db/functions/runs.sql
  - Check how day_count is calculated when creating merged runs
  - Confirm whether span calculation is inclusive (expected: end_date - start_date + 1)
- Run targeted test case in SQL:
  1. Clean state for user 'merge-bug'
     DELETE FROM runs WHERE user_id='merge-bug';
     DELETE FROM day_marks WHERE user_id='merge-bug';
  2. Insert marks:
     INSERT INTO day_marks(user_id, local_date, value) VALUES ('merge-bug','2025-09-09',true);
     INSERT INTO day_marks(user_id, local_date, value) VALUES ('merge-bug','2025-09-10',true);
     INSERT INTO day_marks(user_id, local_date, value) VALUES ('merge-bug','2025-09-12',true);
  3. Bridge gap:
     INSERT INTO day_marks(user_id, local_date, value) VALUES ('merge-bug','2025-09-11',true);
  4. Verify:
     SELECT span, day_count FROM runs WHERE user_id='merge-bug';

Proof:
- Expected span: [2025-09-09, 2025-09-13)
- Expected day_count: 4
- If actual day_count = 3, confirm bug in merge calculation logic

Error Handling (per Mid-Phase Error Handling Protocol):
- If critical issues occur (SQL errors, missing function, crashes, infra failures):
  → STOP immediately
  → Summarize findings + recommend next steps
  → WAIT for operator approval before resuming  

Scope Control (per Scope Deviation Protocol):
- If proposed work deviates from agreed scope (schema refactors, new functions, extra rewrites):
  → STOP immediately
  → Summarize deviation vs. agreed scope
  → Provide pros/cons of addressing now vs. deferring
  → WAIT for explicit operator approval before resuming  

Server Persistence (Replit Environments):
- ❌ Do not attempt: One-shot shell commands combining server startup, login, API test, log capture, and cleanup.  
- ✅ Do instead:  
  - Run the server in foreground for investigation (`DEBUG=* node index.js`).  
  - Use Reserved VM Deployments/Workflows for persistent execution.  
  - Capture logs directly via foreground mode.  
- Reason: Replit environments kill background processes. One-shot chaining does not solve this; it only masks failures and produces misleading logs.  
- Lesson: Always run servers via foreground mode or Reserved VM. Never attem
