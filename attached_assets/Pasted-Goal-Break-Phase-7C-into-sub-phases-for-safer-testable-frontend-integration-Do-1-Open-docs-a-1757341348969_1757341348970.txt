Goal: Break Phase 7C into sub-phases for safer, testable frontend integration.

Do:

1. Open `docs/agent_memory/imp_plans/v2.md`.
2. Locate the section:
PHASE 7C: Frontend Integration

yaml
Copy code
3. Replace it entirely with three new sub-phases:

---

### PHASE 7C-1: Dashboard MVP (Totals Only)
**Goal:** Implement minimal dashboard components to display totals (current run, longest run, total days).

**Tasks**
- Build totals panel consuming `/api/v2/totals`
- Add basic loading, empty, and error states
- Gate totals UI behind `ff.potato.runs_v2` and `ff.potato.totals_v2`

**Exit Criteria**
- Dashboard shows correct totals for a user with active + historical runs
- Feature flags hide/show totals panel correctly

**Evidence to Collect**
- Screenshot of totals panel
- curl `/api/v2/totals` response compared with UI render
- Feature flag toggle proof (UI hidden when flags OFF, visible when ON)

---

### PHASE 7C-2: Run History Pagination
**Goal:** Implement run history UI consuming `/api/v2/runs`.

**Tasks**
- Build paginated list view of runs (id, start_date, end_date, day_count, active)
- Implement pagination controls (`page`, `limit`)
- Match UI behavior to API contract

**Exit Criteria**
- Run history page paginates correctly across multiple pages
- UI pagination metadata matches API fields (`page`, `limit`, `totalPages`, `totalRuns`, `hasNext`, `hasPrev`)

**Evidence to Collect**
- Screenshot of paginated run history UI
- curl `/api/v2/runs` output compared with UI render
- Frontend test IDs confirm runs render correctly

---

### PHASE 7C-3: Feature Flag & Error Handling Polish
**Goal:** Finalize production-ready frontend integration with robust feature flagging and error handling.

**Tasks**
- Ensure both feature flags (`ff.potato.runs_v2`, `ff.potato.totals_v2`) toggle visibility of UI components
- Add polished error handling (401/500 states, invariant errors)
- Improve loading/empty states for runs and totals panels

**Exit Criteria**
- Feature flags toggle all runs/totals UI components correctly
- UI gracefully handles empty data, API errors, and auth failures
- Logs/tests confirm invariant error handling

**Evidence to Collect**
- Screenshots showing UI with flags ON/OFF
- Test scenarios for error/empty states
- Automation test results (Cypress or React Testing Library) verifying correct UI behavior

---

Rollback Plan: Hide all frontend components behind feature flags, preserve existing calendar functionality.  
Feature Flag(s): `ff.potato.runs_v2` + `ff.potato.totals_v2` + UI integration gated  

Error Handling: This phase follows the Error Handling Clause.

---

Proof:
- v2.md updated with 7C-1, 7C-2, 7C-3 sub-phases
- Each sub-phase includes Goals, Tasks, Exit Criteria, and Evidence
- Rollback plan and feature flag gating preserved
- Error Handling Clause referenced